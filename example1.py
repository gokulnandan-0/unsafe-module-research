# -*- coding: utf-8 -*-
"""Example1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JXxzAbhDQvKpCrhNRNFiOKmuqh18Nvpy
"""

import pandas as pd
import requests
from io import StringIO

SAFE_DOMAINS = ['google.com']

# Example usage
try:
    url = "https://raw.githubusercontent.com/cs109/2014_data/master/countries.csv"
    data = pd.read_csv(url)
    print(data)
except PermissionError as e:
    print(e)

'''
Now i am blocking the github site by removing it from SAFE_DOMAINS.
This is a direct updation to pd.read_csv() function but this can also be done using similar updated to the requests() module.
'''
def safe_read_csv(filepath_or_buffer, *args, **kwargs):
    if isinstance(filepath_or_buffer, str) and filepath_or_buffer.startswith('https'):
        # Extract the domain from the URL
        domain = filepath_or_buffer.split('/')[2]
        if domain not in SAFE_DOMAINS:
            raise PermissionError(f"Access to domain '{domain}' is not allowed")

        # Fetch the data from the URL
        response = requests.get(filepath_or_buffer)
        if response.status_code != 200:
            raise ConnectionError(f"Failed to retrieve data from {filepath_or_buffer}")

        # Read the data into a DataFrame
        data = StringIO(response.text)
        return pd.read_csv(data, *args, **kwargs)
    return
pd.read_csv = safe_read_csv

try:
    unsafe_url = "https://raw.githubusercontent.com/cs109/2014_data/master/countries.csv"  # This should be blocked
    data = pd.read_csv(unsafe_url)
except PermissionError as e:
    print("Caught an unsafe operation:", e)

